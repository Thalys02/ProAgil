'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true,
});
exports.exploreBundle = exploreBundle;
exports.adjustSourcePaths = adjustSourcePaths;
exports.NO_SOURCE_KEY = exports.SOURCE_MAP_COMMENT_KEY = exports.UNMAPPED_KEY = void 0;

var _convertSourceMap = _interopRequireDefault(require('convert-source-map'));

var _path = _interopRequireDefault(require('path'));

var _sourceMap = require('source-map');

var _lodash = require('lodash');

var _api = require('./api');

var _helpers = require('./helpers');

var _appError = require('./app-error');

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

const UNMAPPED_KEY = '[unmapped]';
exports.UNMAPPED_KEY = UNMAPPED_KEY;
const SOURCE_MAP_COMMENT_KEY = '[sourceMappingURL]';
exports.SOURCE_MAP_COMMENT_KEY = SOURCE_MAP_COMMENT_KEY;
const NO_SOURCE_KEY = '[no source]';
/**
 * Analyze a bundle
 */

exports.NO_SOURCE_KEY = NO_SOURCE_KEY;

async function exploreBundle(bundle, options) {
  const { code, map } = bundle;
  const sourceMapData = await loadSourceMap(code, map);
  const sizes = computeFileSizes(sourceMapData, options);
  const files = adjustSourcePaths(sizes.files, options);
  const { totalBytes, unmappedBytes, eolBytes, sourceMapCommentBytes } = sizes;

  if (!options.excludeSourceMapComment) {
    files[SOURCE_MAP_COMMENT_KEY] = sourceMapCommentBytes;
  }

  if (!options.onlyMapped) {
    files[UNMAPPED_KEY] = unmappedBytes;
  } // Free Wasm data

  sourceMapData.consumer.destroy();
  return {
    bundleName: (0, _api.getBundleName)(bundle),
    totalBytes,
    unmappedBytes,
    eolBytes,
    sourceMapCommentBytes,
    files,
  };
}

/**
 * Get source map
 */
async function loadSourceMap(codeFile, sourceMapFile) {
  const codeFileContent = (0, _helpers.getFileContent)(codeFile);
  let consumer;

  if (sourceMapFile) {
    const sourceMapFileContent = (0, _helpers.getFileContent)(sourceMapFile);
    consumer = await new _sourceMap.SourceMapConsumer(sourceMapFileContent);
  } else {
    // Try to read a source map from a 'sourceMappingURL' comment.
    let converter = _convertSourceMap.default.fromSource(codeFileContent);

    if (!converter && !Buffer.isBuffer(codeFile)) {
      converter = _convertSourceMap.default.fromMapFileSource(
        codeFileContent,
        _path.default.dirname(codeFile)
      );
    }

    if (!converter) {
      throw new _appError.AppError({
        code: 'NoSourceMap',
      });
    }

    consumer = await new _sourceMap.SourceMapConsumer(converter.toJSON());
  }

  if (!consumer) {
    throw new _appError.AppError({
      code: 'NoSourceMap',
    });
  }

  return {
    consumer,
    codeFileContent,
  };
}

const COMMENT_REGEX = _convertSourceMap.default.commentRegex;
const MAP_FILE_COMMENT_REGEX = _convertSourceMap.default.mapFileCommentRegex;
/** Extract either source map comment from file content */

function getSourceMapComment(fileContent) {
  const sourceMapComment =
    (0, _helpers.getFirstRegexMatch)(COMMENT_REGEX, fileContent) ||
    (0, _helpers.getFirstRegexMatch)(MAP_FILE_COMMENT_REGEX, fileContent) ||
    ''; // Remove trailing EOLs

  return sourceMapComment.trim();
}

const LF = '\n';
const CR_LF = '\r\n';

function detectEOL(content) {
  return content.includes(CR_LF) ? CR_LF : LF;
}

function checkInvalidMappingColumn({ generatedLine, generatedColumn, line, eol }) {
  const maxColumnIndex = line.length - 1; // Ignore case when source map references EOL character (e.g. https://github.com/microsoft/TypeScript/issues/34695)

  if (generatedColumn > maxColumnIndex && `${line}${eol}`.lastIndexOf(eol) !== generatedColumn) {
    throw new _appError.AppError({
      code: 'InvalidMappingColumn',
      generatedLine,
      generatedColumn,
      maxColumn: line.length,
    });
  }
}
/** Calculate the number of bytes contributed by each source file */

function computeFileSizes(sourceMapData, { excludeSourceMapComment }) {
  const { consumer, codeFileContent: fileContent } = sourceMapData;
  const sourceMapComment = getSourceMapComment(fileContent); // Remove inline source map comment, source map file comment and trailing EOLs

  const source = fileContent.replace(sourceMapComment, '').trim();
  const eol = detectEOL(fileContent); // Assume only one type of EOL is used

  const lines = source.split(eol);
  const files = {};
  let mappedBytes = 0;
  consumer.computeColumnSpans();
  consumer.eachMapping(({ source, generatedLine, generatedColumn, lastGeneratedColumn }) => {
    // Columns are 0-based, Lines are 1-based
    const line = lines[generatedLine - 1];

    if (line === undefined) {
      throw new _appError.AppError({
        code: 'InvalidMappingLine',
        generatedLine,
        maxLine: lines.length,
      });
    }

    checkInvalidMappingColumn({
      generatedLine,
      generatedColumn,
      line,
      eol,
    });
    let mappingLength = 0;

    if (lastGeneratedColumn !== null) {
      checkInvalidMappingColumn({
        generatedLine,
        generatedColumn: lastGeneratedColumn,
        line,
        eol,
      });
      mappingLength = lastGeneratedColumn - generatedColumn + 1;
    } else {
      mappingLength = Buffer.byteLength(line) - generatedColumn;
    }

    const filename = source === null ? NO_SOURCE_KEY : source;
    files[filename] = (files[filename] || 0) + mappingLength;
    mappedBytes += mappingLength;
  });
  const sourceMapCommentBytes = Buffer.byteLength(sourceMapComment);
  const eolBytes = (0, _helpers.getOccurrencesCount)(eol, fileContent) * Buffer.byteLength(eol);
  const totalBytes = Buffer.byteLength(fileContent);
  return {
    files,
    unmappedBytes: totalBytes - mappedBytes - sourceMapCommentBytes - eolBytes,
    eolBytes,
    sourceMapCommentBytes,
    ...(excludeSourceMapComment
      ? {
          totalBytes: totalBytes - sourceMapCommentBytes,
        }
      : {
          totalBytes,
        }),
  };
}

function adjustSourcePaths(fileSizeMap, options) {
  if (!options.noRoot) {
    const prefix = (0, _helpers.getCommonPathPrefix)(Object.keys(fileSizeMap));
    const length = prefix.length;

    if (length) {
      fileSizeMap = (0, _lodash.mapKeys)(fileSizeMap, (size, source) => source.slice(length));
    }
  }

  if (options.replaceMap) {
    fileSizeMap = Object.entries(options.replaceMap).reduce((result, [before, after]) => {
      const regexp = new RegExp(before, 'g');
      return (0, _lodash.mapKeys)(result, (size, source) => source.replace(regexp, after));
    }, fileSizeMap);
  }

  return fileSizeMap;
}
